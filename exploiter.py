from strategy import Strategy
import random


class Exploiter(Strategy):
    """
        The Exploiter strategy observes the opponent's last 10 moves and adjusts its defection probability based on the
        opponent's cooperativeness. The more the opponent cooperates, the higher the likelihood of the Exploiter defecting
        to take advantage of that cooperation.
    """

    def __init__(self):
        self.player_number = None

    def set_player_number(self, player_number):
        self.player_number = player_number

    def player_move(self, history):
        if len(history) < 10:
            return 'c'

        opponent_last_moves = [move[1] if self.player_number == 1 else move[0] for move in history[-10:]]

        # Adjust defection probability based on opponent's cooperativeness
        cooperation_count = opponent_last_moves.count('c')

        # More cooperation = higher defection rate
        if cooperation_count >= 8:
            return 'd' if random.random() < 0.7 else 'c'
        elif cooperation_count >= 6:
            return 'd' if random.random() < 0.5 else 'c'
        elif cooperation_count >= 4:
            return 'd' if random.random() < 0.3 else 'c'

        # If the opponent is not cooperative, defect less often to avoid retaliation
        return 'c' if random.random() < 0.8 else 'd'

    def get_name(self):
        return 'Exploiter'
